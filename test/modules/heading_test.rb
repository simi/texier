require "#{File.dirname(__FILE__)}/../test_helper"

# Test case for Texier::Modules::Heading class
class Texier::Modules::HeadingTest < Test::Unit::TestCase
  def setup
    @texier = Texier::Base.new
  end
  
  def test_single_surrounded_heading
    assert_equal_output(
      '<h1>hello world</h1>',
      '####### hello world'
    )
  end
  
  def test_two_surrounded_headings
    assert_equal_output(
      '<h1>level 1</h1><h2>level 2</h2>',
      "####### level 1\n\n###### level 2"
    )
  end
  
  def test_surrounded_heading_with_tail_markers
    assert_equal_output(
      '<h1>hello world</h1>',
      '####### hello world ######'
    )
  end
  
  def test_every_heading_should_be_added_to_the_table_of_contents
    @texier.process("####### level 1\n\n###### level 2")
    
    mod = @texier.heading_module
    
    assert_equal 2, mod.toc.size
    assert_equal 'level 1', mod.toc[0].content
    assert_equal 'level 2', mod.toc[1].content
  end
  
  def test_dynamic_level_balancing
    assert_equal_output('<h1>hello</h1>', '####### hello')
    assert_equal_output('<h1>hello</h1>', '###### hello')
    assert_equal_output('<h1>hello</h1>', '##### hello')
    
    assert_equal_output(
      '<h1>level 1</h1><h2>level 3</h2>',
      "####### level 1\n\n#### level 3"
    )
    
    assert_equal_output(
      '<h1>level 3</h1><h2>level 5</h2>',
      "#### level 3\n\n## level 5"
    )
  end
  
  def test_title
    @texier.process('####### hello world')    
    assert_equal 'hello world', @texier.heading_module.title
  end
  
  def test_title_when_first_heading_contains_inline_element
    @texier.process('####### hello *world*')
    assert_equal 'hello world', @texier.heading_module.title
  end
  
  def test_top
    assert_equal_output '<h1>hello</h1>', '####### hello'
    
    @texier.heading_module.top = 3
    assert_equal_output '<h3>hello</h3>', '####### hello'
  end
  
  def test_more_means_higher
    @texier.heading_module.more_means_higher = true
    assert_equal_output(
      '<h1>level 1</h1><h2>level 2</h2>',
      "####### level 1\n\n###### level 2"
    )
    
    @texier.heading_module.more_means_higher = false    
    assert_equal_output(
      '<h1>level 1</h1><h2>level 2</h2>',
      "###### level 1\n\n####### level 2"
    )
  end
  
  def test_fixed_balancing
    @texier.heading_module.balancing = :fixed
    assert_equal_output '<h4>hello</h4>', '#### hello'
  end
  
  def test_generate_id
    @texier.heading_module.generate_id = true
    assert_equal_output(
      '<h1 id="toc-hello-world">hello world</h1>',
      '####### hello world'
    )
    
    assert_equal_output(
      '<h1 id="toc-level-1">level 1</h1><h2 id="toc-level-2">level 2</h2>',
      "####### level 1\n\n###### level 2"
    )
  end
  
  def test_generated_id_should_be_unique
    @texier.heading_module.generate_id = true
    
    assert_equal_output(
      '<h1 id="toc-hello">hello</h1><h2 id="toc-hello-2">hello</h2>',
      "####### hello\n\n###### hello"
    )
  end
  
  def test_generate_id_when_heading_contains_inline_element
    @texier.heading_module.generate_id = true
    
    assert_equal_output(
      '<h1 id="toc-hello-world">hello <em>world</em></h1>',
      '####### hello *world*'
    )
  end
  
  def test_single_underlined_heading
    assert_equal_output(
      '<h1>hello world</h1>',
      "hello world\n######"
    )    
  end
  
  def test_two_underlined_headings
    assert_equal_output(
      '<h1>level 1</h1><h2>level 2</h2>',
      "level 1\n####\n\nlevel 2\n****"
    )
  end

  def test_heading_and_paragraph
    assert_equal_output(
      '<h1>heading</h1><p>hello world</p>',
      "####### heading\n\nhello world"
    )
  end
  
  def test_heading_containing_inline_elements
    assert_equal_output(
      '<h1>hello <em>world</em></h1>',
      '####### hello *world*'
    )
    
    assert_equal_output(
      '<h1>hello <em>world</em></h1>',
      "hello *world*\n####"
    )
  end
  
  def test_surrounded_heading_with_modifier
    assert_equal_output(
      '<h1 class="foo">hello world</h1>',
      '####### hello world .[foo]'
    )
  end
  
  def test_underlined_heading_with_modifier
    assert_equal_output(
      '<h1 class="foo">hello world</h1>',
      "hello world .[foo]\n####"
    )
  end
  
  def test_id_in_modifier_should_have_precedence_over_autogenerated_id
    @texier.heading_module.generate_id = true
    assert_equal_output(
      '<h1 id="foo">hello world</h1>',
      '####### hello world .[#foo]'
    )
  end
end
