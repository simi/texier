require "#{File.dirname(__FILE__)}/../module"

module Texier::Modules
  # This module provides headings.
  class Heading < Texier::Module
    # Content of the first heading.
    attr_reader :title
    
    # Generated table of contents.
    attr_accessor :toc
    
    options(
      # Autogenerate id's of heading
      :generate_id => true, 
      
      # Prefix of autogenerated id's
      :id_prefix => 'toc-',
      
      # Level of top-level heading (1..6)
      :top => 1,
      
      # For surrounded headings: more #### means higher level.
      :more_means_higher => true
    )
    
    parser do      
      # Surrounded headings
      marker = expression(/ *(\#{2,}|={2,}) +/) do |line|
        # Calculate relative level of heading according to length of the marker.
        7 - [line.strip.length, 7].min
      end
      tail = expression(/ *(\#{2,}|={2,})? *$/)
      
      content = everything_up_to(tail)
      # TODO: support inline elements inside heading's content.
      # content = one_or_more(inline_element).up_to(tail)
      
      heading = (marker & content & tail).map do |level, content, _|
        element = Texier::Element.new(:h, content, :level => level)
        element[:id] ||= auto_id(content)
          
        toc << element
        @title ||= element.content.to_s
        
        element
      end
      
      block_element << heading
    end
    
    def before_parse(input)
      @title = nil
      @toc = []
      @used_ids = {}
      
      input
    end
    
    def after_parse(dom)
      # Find highest heading level, then second highest, and so on. Then create
      # mapping table, where the highest level will be mapped to level 1, second
      # highest to level 2, and so on. Then modify levels of headings according
      # to this table.
      
      mapping = {}
      used_levels = {}
      toc.each do |element|
        used_levels[element[:level]] = true
      end
      
      used_levels = used_levels.keys.sort
      used_levels.each_with_index do |level, index|
        mapping[level] = [index + top, 6].min
      end
      
      # Assign dynamic levels
      toc.each do |element|
        element.name = "h#{mapping[element[:level]]}"
        element[:level] = nil
      end
    end
    
    protected
    
    # Autogenerate unique id for heading.
    def auto_id(content)
      return nil unless generate_id
      
      id = id_prefix + Texier::Utilities.webalize(content)
      id = Texier::Utilities.sequel(id) while @used_ids[id]
      
      @used_ids[id] = true
      id
    end
  end
end
